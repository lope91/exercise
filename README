Describing the development done
=================================
The development of this project was done using the Play framework, in version 2.5.13. I understood it be the best option, since the import of the play-scala template
would already give me the necessary structure to proceed with the creation of REST services.

With the environment created successfully, I started creating the first service (saveTransaction). In this service, the first thing I do is check whether the account
exists or not. This evaluation is done in a HashMap, since a bank can have several accounts and the search within these accounts should be in a collection BigO 1.
Within this HashMap, then, the accounts are distinguished by the key "accountNumber", where each key stores an object of type Account.

The Account object is the representation of the Account class, which was created to store the current bank account balance and an arrayList with all operations performed
for that account, that is, an ArrayList[Operation], where Operation is an object representing each one of the transactions made for that account.

For each of the classes, the Reads and Writes pattern was used to easily validate the received json. This way, when receiving the json inside the saveTransaction and
make the evaluation if the account exists, it's actually made the transformation of the same into objects, facilitating the navigation between the attributes of those
objects. If the account does not exist, its automatically created.

After this, is evaluated if the transaction being made is a future transaction and, if so, the current balance of the account is not updated. If not, a method of the
Account class is used to update the balance value, based on the type of operation, using the pattern match. If this is not a possible operation, an exception is thrown.

After this, the transaction is added to the ArrayList of the account operations used, taking advantage of already ordering the transactions in order of date, facilitating
the construction of the next services. If all goes well during the process, the response is generated in payload format.

In the bank balance recovery service, you receive the account number you want and, like the first service, the validation is done if the account exists. If it exists, its
simply captured the value of the current bank balance generated by the first service.

In the bank statement recovery service, the retrieval of the parameters in the format of queryString and again validated if the account actually exists. If it exists,
an org.joda.time.Interval is created to check if the date of the account transactions are within the time interval of the dates passed by QueryString.

Using a method of the Account class, the bank balance is updated only for presentation in the statement, as the transactions are being processed. In addition, if the
transaction is within the time interval, the addition of the record is made within a map of extract records. This way, in the end, it is easier to generate payLoad return.

In the debit period recovery service, all transactions of the searched account are traversed and, if during the transaction evaluations, the balance has been negative, a new
record is created that will be returned by the service, adding value to Debit start date variable and capturing the negative current value (multiplying by -1 to improve the
presentation of the data in the payload). The traversal is also controlled by a variable called status, where it identifies whether the status is positive or negative. If you
have reached the last transaction record of the account and the status is still negative, it is because the account is still negative, so the presentation of this record should
be without the end date of debit.

Obs.: I understand that the methods of the Account class might even have been developed using a trait, but I did not find it REALLY necessary to use this artifice. In addition,
the receipt of the data in the GET services was not done using a payload because it wanted to show that all the options meet the requested (I believe, including, obeying security
processes) and that I can use all forms as well


How-to: Build and run the code
=================================

1) At the command prompt, access a folder that is empty on your computer and run the command below:

git clone https://github.com/lope91/exercise.git

Obs.: enter your credentials, if necessary, and the repository will be downloaded to your computer. If you want, you can download the repository via github, acessing

https://github.com/lope91/exercise

And click in "Clone or Download" -> "Download ZIP"

2) Access the folder of the downloaded repository by typing the command below:

cd exercise

3) After this, using the activator, type the command below:

activator run

Wait for the system to download the dependencies and start the server.

4) From the moment the server is already started, you can start using the services created as requested. Here are examples of how to perform these services:

4.1) Creating a transaction for an account:

curl --header "Content-type: application/json" --request POST --data '{"number": "111222", "operationDescription": "Transaction Test", "operationType": "CRE", "operationBalance": 30.10, "operationDate": "10/03/2017"}' http://localhost:9000/saveTransaction

The types of operation are:
CRE: Credit, DEB: Debit, SAL: Salary, PUR: Purchase, WIT: Withdrawal and DEP: Deposit

4.2) Checking your account balance:

curl --header "Content-type: application/json" --request GET  "http://localhost:9000/getCurrentBalance/111222"

4.3) Getting your account statement:

curl --header "Content-type: application/json" --request GET  "http://localhost:9000/getStatement?accountNumber=111222&startDate=07/03/2017&finalDate=15/03/2017"

4.4) Getting yours period of debt:

curl --header "Content-type: application/json" --request GET  "http://localhost:9000/getPeriodsOfDebt/111222"



How-to: Test the code
=================================

1) At the command prompt, access a folder that is empty on your computer and run the command below:

git clone https://github.com/lope91/exercise.git

Obs.: enter your credentials, if necessary, and the repository will be downloaded to your computer. If you want, you can download the repository via github, acessing

https://github.com/lope91/exercise

And click in "Clone or Download" -> "Download ZIP"

2) Access the folder of the downloaded repository by typing the command below:

cd exercise

3) After this, using the activator, type the command below:

activator test